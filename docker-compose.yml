version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: meeting-manager-db
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-meeting_manager}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - meeting-manager-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: runner
    container_name: meeting-manager-backend
    restart: unless-stopped
    ports:
      - '3333:3333'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3333
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-meeting_manager}?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    volumes:
      # Mount source code for hot-reloading in development
      - ./apps/backend/src:/app/apps/backend/src
      - ./apps/backend/prisma:/app/prisma
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - meeting-manager-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3333/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3333}
      target: runner
    container_name: meeting-manager-frontend
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3333}
      PORT: 3000
    volumes:
      # Mount source code for hot-reloading in development
      - ./apps/frontend/src:/app/apps/frontend/src
      - ./apps/frontend/public:/app/apps/frontend/public
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - meeting-manager-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  meeting-manager-network:
    driver: bridge
    name: meeting-manager-network

volumes:
  postgres_data:
    name: meeting-manager-postgres-data
    driver: local
