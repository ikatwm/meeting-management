name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual deployment

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Detect which parts of the codebase changed
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - '.npmrc'
              - 'nx.json'
              - 'tsconfig.base.json'
              - 'tsconfig.json'
              - '.github/workflows/deploy.yml'
            backend:
              - 'apps/backend/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - '.npmrc'
              - 'nx.json'
              - 'tsconfig.base.json'
              - 'tsconfig.json'
              - 'apps/backend/Dockerfile'
              - '.github/workflows/deploy.yml'

  # Deploy Backend - Choose your platform
  deploy-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    name: Deploy Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean Nx cache
        run: pnpm nx reset

      - name: Generate Prisma Client
        run: cd apps/backend && pnpm prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build Backend
        run: pnpm nx build backend --prod --skip-nx-cache
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Note: Test target not configured yet for backend
      # - name: Run Tests
      #   run: pnpm nx test backend
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}

      # OPTION 1: Deploy to Render.com (uncomment to use)
      - name: Deploy to Render
        run: |
          curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}"

      # OPTION 2: Deploy to Railway (uncomment to use)
      # - name: Install Railway CLI
      #   run: npm install -g @railway/cli
      #
      # - name: Deploy to Railway
      #   run: railway up --service backend
      #   env:
      #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      # OPTION 3: Deploy to Fly.io (uncomment to use)
      # - name: Setup Flyctl
      #   uses: superfly/flyctl-actions/setup-flyctl@master
      #
      # - name: Deploy to Fly.io
      #   run: flyctl deploy --remote-only --config apps/backend/fly.toml
      #   env:
      #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # OPTION 4: Deploy via Docker to any platform
      # - name: Build and Push Docker Image
      #   run: |
      #     docker build -t your-registry/meeting-manager-backend:${{ github.sha }} -f apps/backend/Dockerfile .
      #     docker push your-registry/meeting-manager-backend:${{ github.sha }}

      - name: Deployment Status
        run: |
          echo "========================================="
          echo "Backend Build Completed Successfully!"
          echo "========================================="
          echo ""
          echo "To deploy backend, uncomment ONE of the deployment options above:"
          echo "  - Render.com (OPTION 1)"
          echo "  - Railway (OPTION 2)"
          echo "  - Fly.io (OPTION 3)"
          echo "  - Docker (OPTION 4)"
          echo ""
          echo "Add required secrets to GitHub:"
          echo "  Settings ‚Üí Secrets ‚Üí Actions"
          echo "========================================="

  # Deployment success notification
  deployment-complete:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend]
    if: always()

    steps:
      - name: Check Deployment Status
        run: |
          echo "========================================="
          echo "üì¶ DEPLOYMENT SUMMARY"
          echo "========================================="
          echo ""
          echo "Changes Detected:"
          echo "  Frontend: ${{ needs.detect-changes.outputs.frontend }} (auto-deployed by Vercel)"
          echo "  Backend:  ${{ needs.detect-changes.outputs.backend }}"
          echo ""
          echo "Deployment Results:"
          echo "  Frontend: Handled by Vercel Git Integration"
          echo "  Backend:  ${{ needs.deploy-backend.result }}"
          echo ""

          # Check if backend deployment failed
          if [[ "${{ needs.deploy-backend.result }}" == "failure" ]]; then
            echo "‚ùå Backend deployment failed!"
            exit 1
          fi

          # Success if backend deployment succeeded or was skipped
          if [[ "${{ needs.deploy-backend.result }}" == "success" || "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
            echo "‚úÖ Backend deployment completed successfully!"
            echo "Frontend is auto-deployed by Vercel on push to main."
          else
            echo "‚ö†Ô∏è Backend deployment failed. Check logs above."
          fi
          echo "========================================="
